{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import pandas as pd\
from sklearn.ensemble import RandomForestClassifier\
from sklearn.model_selection import train_test_split\
\
strategies_df = df3.reset_index()\
strategies_df = strategies_df.iloc[:,2:]\
\
# Calcola la percentuale di vincita per ogni strategia\
strategies_df['Win_Percentage'] = strategies_df[strategies_df > 0].count(axis=1) / len(strategies_df.columns)\
\
\
# Dividi il dataframe in features (PNL) e target (vincita o perdita)\
features = strategies_df.drop(columns='Win_Percentage').values\
target = (strategies_df['Win_Percentage'] > 0).astype(int).values\
\
# Dividi il dataset in set di addestramento e test\
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42 , shuffle=False)\
\
# Addestra un modello di classificazione (Random Forest)\
model = RandomForestClassifier()\
model.fit(X_train, y_train)\
\
# Calcola l'importanza delle features\
feature_importance = model.feature_importances_\
\
# Crea una Serie di pandas con l'importanza delle features\
importance_series = pd.Series(feature_importance, index=strategies_df.columns[:-1])\
\
# Ordina le strategie in base all'importanza delle features\
strategies_df['Feature_Importance'] = importance_series\
top_10_strategies = strategies_df.nlargest(10, 'Feature_Importance')\
\
# Stampa le strategie selezionate\
top_10_strategies = importance_series.sort_values(ascending=False).iloc[:10].index.to_list()\
\
top_10_strategies}